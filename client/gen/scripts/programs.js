// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var AppView, ButtonView, Program, ProgramView, Set, SetView, Sets, Split, SplitView, Splits, Weight, WeightView, Weights, app, button_container, hide_button_container, show_button_container, top;
    Set = (function(_super) {

      __extends(Set, _super);

      function Set() {
        return Set.__super__.constructor.apply(this, arguments);
      }

      Set.prototype.initialize = function() {};

      return Set;

    })(Backbone.Model);
    Sets = (function(_super) {

      __extends(Sets, _super);

      function Sets() {
        return Sets.__super__.constructor.apply(this, arguments);
      }

      Sets.prototype.model = Set;

      return Sets;

    })(Backbone.Collection);
    Weight = (function(_super) {

      __extends(Weight, _super);

      function Weight() {
        return Weight.__super__.constructor.apply(this, arguments);
      }

      Weight.prototype.initialize = function() {
        return this.sets = new Sets(this.get('sets'));
      };

      return Weight;

    })(Backbone.Model);
    Weights = (function(_super) {

      __extends(Weights, _super);

      function Weights() {
        return Weights.__super__.constructor.apply(this, arguments);
      }

      Weights.prototype.model = Weight;

      return Weights;

    })(Backbone.Collection);
    Split = (function(_super) {

      __extends(Split, _super);

      function Split() {
        return Split.__super__.constructor.apply(this, arguments);
      }

      Split.prototype.initialize = function() {
        return this.weights = new Weights(this.get('weights'));
      };

      return Split;

    })(Backbone.Model);
    Splits = (function(_super) {

      __extends(Splits, _super);

      function Splits() {
        return Splits.__super__.constructor.apply(this, arguments);
      }

      Splits.prototype.model = Split;

      return Splits;

    })(Backbone.Collection);
    Program = (function(_super) {

      __extends(Program, _super);

      function Program() {
        return Program.__super__.constructor.apply(this, arguments);
      }

      Program.prototype.urlRoot = '/api/programs/3';

      Program.prototype.splits = new Splits;

      Program.prototype.initialize = function() {
        return this.fetch();
      };

      Program.prototype.parse = function(res) {
        this.splits = new Splits(res.splits);
        res.splits = this.splits;
        return res;
      };

      Program.prototype.clear = function() {
        return this.destroy();
      };

      return Program;

    })(Backbone.Model);
    SetView = (function(_super) {

      __extends(SetView, _super);

      function SetView() {
        return SetView.__super__.constructor.apply(this, arguments);
      }

      SetView.prototype.template_first = _.template($("#set_view_first").html());

      SetView.prototype.template = _.template($("#set_view").html());

      SetView.prototype.initialize = function() {
        _.bindAll(this);
        this.model.bind('change', this.render);
        return this.render();
      };

      SetView.prototype.render = function() {
        if (this.model.get('posiiton') === 1) {
          this.setElement(this.template_first(this.model.toJSON()));
        } else {
          this.setElement(this.template(this.model.toJSON()));
        }
        return this;
      };

      return SetView;

    })(Backbone.View);
    WeightView = (function(_super) {

      __extends(WeightView, _super);

      function WeightView() {
        return WeightView.__super__.constructor.apply(this, arguments);
      }

      WeightView.prototype.template = _.template($("#weight_view").html());

      WeightView.prototype.initialize = function() {
        _.bindAll(this);
        this.model.bind('change', this.render);
        return this.render();
      };

      WeightView.prototype.render = function() {
        this.setElement(this.template(this.model.toJSON()));
        this.update();
        return this;
      };

      WeightView.prototype.update = function() {
        var _this = this;
        return this.model.sets.each(function(set) {
          var set_view;
          set_view = new SetView({
            model: set
          });
          if (set.get('position') === 1) {
            return $(_this.el).find(".workout_exercise").after(set_view.render().el);
          } else {
            return $(_this.el).find(".table_break").before(set_view.render().el);
          }
        });
      };

      return WeightView;

    })(Backbone.View);
    SplitView = (function(_super) {

      __extends(SplitView, _super);

      function SplitView() {
        return SplitView.__super__.constructor.apply(this, arguments);
      }

      SplitView.prototype.template = _.template($("#split_view").html());

      SplitView.prototype.initialize = function() {
        return _.bindAll(this);
      };

      SplitView.prototype.render = function() {
        this.setElement(this.template(this.model.toJSON()));
        this.update();
        return this;
      };

      SplitView.prototype.update = function() {
        var _this = this;
        return this.model.weights.each(function(weight) {
          var weight_view;
          weight_view = new WeightView({
            model: weight
          });
          return $(_this.el).find(".workout_table").append(weight_view.render().el);
        });
      };

      return SplitView;

    })(Backbone.View);
    ProgramView = (function(_super) {

      __extends(ProgramView, _super);

      function ProgramView() {
        return ProgramView.__super__.constructor.apply(this, arguments);
      }

      ProgramView.prototype.template = _.template($("#program_view").html());

      ProgramView.prototype.initialize = function(opt) {
        _.bindAll(this);
        this.model.bind("change", this.render);
        opt.vent.bind('program_edit', this.edit);
        return this.render();
      };

      ProgramView.prototype.render = function() {
        this.el.innerHTML = this.template(this.model.toJSON());
        this.update();
        return this;
      };

      ProgramView.prototype.update = function() {
        var _this = this;
        return this.model.splits.each(function(split) {
          var split_view;
          split_view = new SplitView({
            model: split
          });
          return $(_this.el).find('#split_holder').append(split_view.render().el);
        });
      };

      ProgramView.prototype.edit = function() {
        $(this.el).addClass('editing');
        return this.input.focus();
      };

      return ProgramView;

    })(Backbone.View);
    AppView = (function(_super) {

      __extends(AppView, _super);

      function AppView() {
        return AppView.__super__.constructor.apply(this, arguments);
      }

      AppView.prototype.el = $('#content_holder');

      AppView.prototype.vent = _.extend({}, Backbone.Events);

      AppView.prototype.initialize = function() {
        var button_view, program_view;
        _.bindAll(this);
        program_view = new ProgramView({
          model: new Program,
          vent: this.vent
        });
        button_view = new ButtonView({
          vent: this.vent
        });
        $(this.el).prepend(program_view.el);
        return $("body").append(button_view.render().el);
      };

      AppView.prototype.render = function() {
        return this;
      };

      return AppView;

    })(Backbone.View);
    ButtonView = (function(_super) {

      __extends(ButtonView, _super);

      function ButtonView() {
        return ButtonView.__super__.constructor.apply(this, arguments);
      }

      ButtonView.prototype.template = _.template($("#button_view").html());

      ButtonView.prototype.initialize = function(opt) {
        _.bindAll(this);
        this.vent = opt.vent;
        return this.render();
      };

      ButtonView.prototype.render = function() {
        this.setElement(this.template());
        return this;
      };

      ButtonView.prototype.events = {
        'click #program_edit': 'edit'
      };

      ButtonView.prototype.edit = function() {
        return this.vent.trigger('program_edit');
      };

      return ButtonView;

    })(Backbone.View);
    app = new AppView;
    $("#content").height($("#nav_left").height() + 80);
    button_container = $("#button_container");
    top = button_container.position().top;
    $(window).scroll(function(event) {
      var y;
      y = $(this).scrollTop();
      if (y >= top - 10) {
        return button_container.addClass('fixed');
      } else {
        return button_container.removeClass('fixed');
      }
    });
    hide_button_container = function() {
      return button_container.addClass('hidden');
    };
    show_button_container = function() {
      return button_container.removeClass('hidden');
    };
    $("#content").mouseout(hide_button_container).mouseover(show_button_container);
    button_container.mouseout(hide_button_container).mouseover(show_button_container);
    return $("#new_program").live("click", function() {
      if (!$(this).hasClass('selected')) {
        $(this).addClass('selected');
        return $(this).animate({
          height: '150px'
        }, {
          duration: 400,
          specialEasing: {
            top: 'easeOutBounce'
          },
          complete: function() {
            $(this).find("#new_program_name").fadeIn();
            return $("#new_program_submit").fadeIn();
          }
        });
      }
    });
  });

}).call(this);
