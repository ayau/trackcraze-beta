// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App.SplitView = (function(_super) {

    __extends(SplitView, _super);

    function SplitView() {
      return SplitView.__super__.constructor.apply(this, arguments);
    }

    SplitView.prototype.template = _.template($("#split_view").html());

    SplitView.prototype.initialize = function(opt) {
      _.bindAll(this);
      this.vent = opt.vent;
      return this.vent.bind('program_edit', this.edit);
    };

    SplitView.prototype.render = function() {
      this.setElement(this.template(this.model.toJSON()));
      this.update();
      return this;
    };

    SplitView.prototype.update = function() {
      var _this = this;
      return this.model.weights.each(function(weight) {
        var weight_view;
        weight_view = new App.WeightView({
          model: weight,
          vent: _this.vent
        });
        return $(_this.el).find(".workout_table").append(weight_view.render().el);
      });
    };

    SplitView.prototype.edit = function() {
      var _ref, _ref1, _ref2;
      if ((_ref = this.split_name) == null) {
        this.split_name = this.$('.split_name');
      }
      this.split_name.addClass('edit');
      if ((_ref1 = this.input) == null) {
        this.input = this.$('.split_name').find('input');
      }
      if ((_ref2 = this.new_exercise) == null) {
        this.new_exercise = this.$('.new_exercise');
      }
      return this.new_exercise.addClass('edit');
    };

    return SplitView;

  })(Backbone.View);

}).call(this);
