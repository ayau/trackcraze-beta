// Generated by CoffeeScript 1.3.3
(function() {
  var config, create_user, db, nano, program, program1, program2, programs;

  config = require('../config');

  nano = require('nano')(config.db.endpoint);

  db = nano.use(config.db.name);

  /*
      PUT request
          requires _id and _rev
          returns rev in header (needs to update in model)
      POST request
          returns id and rev
      GET request
          returns _id and _rev
  */


  /*
  User
  {
      type       : "user"
      id         : (id for couchdb)
      rev        : (rev for couchdb)
      fb_id      : (facebook id)
      first_name : (first name)
      last_name  : (last name)
      gender     : (male/female/undisclosed)
      programs   : [{
                      id   : (facebook_id)
                      name : (program name)
                    }]
  }
  
  
  Program
  {
      type         : "program"
      id           : (id from couchdb)
      rev          : (rev for couchdb)
      created_at   : (2012-07-10 10:24:03)
      main_program : true
      name         : (name of program)
      privacy      : (privacy)
      user_id      : (owner)
      splits : [
          {
              id        : (unused but required by backbone)
              name      : (name of split)
              position  : (position)
              weights   : [
                  {
                      id        : (unused)
                      name      : (Exercise name)
                      position  : (position)
                      comment   : (comment on exercise)
                      sets      : [
                          {
                              id        : (unused)
                              set       : (number of sets)
                              weight    : (weight in lbs)
                              lbkg      : (what client prefers to display as)
                              rep       : (number of reps)
                              position  : (position)
                          }
                      ]
                  }
              ]
          }
      ]
  }
  */


  exports.login = function(fb, callback) {
    var id;
    id = fb.id;
    return db.view('users', 'facebook', {
      key: id
    }, function(err, body) {
      var user;
      if (!err) {
        console.log(body);
        if (body.rows.length === 0) {
          user = {
            fb_id: id,
            first_name: fb.first_name,
            last_name: fb.last_name,
            gender: fb.gender === 'male' || fb.gender === 'female' ? fb.gender : 'undisclosed'
          };
          return create_user(user, callback);
        } else {
          user = body.rows[0].value;
          user.id = user._id;
          user.rev = user._rev;
          delete user._id;
          delete user._rev;
          return callback(null, user);
        }
      } else {
        return callback(err, null);
      }
    });
  };

  create_user = function(user, callback) {
    if ((user != null) && (user.fb_id != null)) {
      user.type = 'user';
      user.programs = [];
      return db.insert(user, function(err, header, body) {
        if (!err) {
          console.log('USER CREATED');
          console.log(header);
          if (header.ok === true) {
            user.id = header.id;
            user.rev = header.rev;
            return callback(null, user);
          }
        } else {
          return callback(err, null);
        }
      });
    } else {
      return callback('error: invalid parameters for user', null);
    }
  };

  exports.get_me = function(req, res) {
    var id;
    id = req.user.id;
    return db.get(id, {}, function(err, body) {
      var user;
      if (!err) {
        console.log('GET ME');
        user = body;
        user.id = user._id;
        user.rev = user._rev;
        delete user._id;
        delete user._rev;
        return res.send(user);
      } else {
        return res.send(err);
      }
    });
  };

  exports.get_me_programs = function(req, res) {
    var me;
    me = req.user.id;
    return db.view('programs', 'list', {
      key: me
    }, function(err, body) {
      var program, programs, r, _i, _len, _ref;
      if (!err && (body.rows != null)) {
        console.log(body);
        programs = [];
        _ref = body.rows;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          program = r.value;
          program['id'] = program['_id'];
          program['rev'] = program['_rev'];
          delete program['_id'];
          delete program['_rev'];
          programs.push(program);
        }
        return res.send(programs);
      } else {
        return res.send(err);
      }
    });
  };

  exports.get_me_program = function(req, res) {
    var id, me;
    me = req.user.id;
    id = req.params.id;
    return db.get(id, {}, function(err, body) {
      var program;
      if (!err) {
        console.log('GET PROGRAM');
        program = body;
        if (program.user_id === me) {
          program.id = program._id;
          program.rev = program._rev;
          delete program._id;
          delete program._rev;
          return res.send(programs);
        } else {
          return res.send(403);
        }
      } else {
        return res.send(err);
      }
    });
  };

  exports.create_me_programs = function(req, res) {
    var me, program;
    me = req.user.id;
    program = req.body;
    program.type = 'program';
    program.user_id = me;
    program.created_at = new Date().getTime();
    return db.insert(program, function(err, header, body) {
      if (!err) {
        console.log('POST PROGRAM');
        console.log(header);
        program.id = header.id;
        program.rev = header.rev;
        return db.atomic('users', 'add_program', me, {
          id: program.id,
          name: program.name
        }, function(err, response) {
          if (!err) {
            console.log('ADDED TO USER');
            res.send(program);
            return console.log(program);
          } else {
            return res.send(err);
          }
        });
      } else {
        return res.send(err);
      }
    });
  };

  exports.edit_program = function(req, res) {
    var me, program;
    console.log('PUT PROGRAM');
    me = req.user.id;
    program = req.body;
    return db.insert(program, function(err, header, body) {
      if (!err) {
        console.log(header);
        program.id = header.id;
        program.rev = header.rev;
        return res.send(program);
      } else {
        return res.send(err);
      }
    });
  };

  exports.delete_program = function(req, res) {
    var id, me;
    console.log('DELETING PROGRAM');
    me = req.user.id;
    id = req.params.id;
    return db.atomic('users', 'remove_program', me, {
      id: id
    }, function(err, response) {
      if (!err) {
        console.log(response);
        console.log('removed from user');
        return db.destroy(id, req.headers['if-match'], function(err, body) {
          if (!err) {
            console.log(body);
            return res.send(body);
          } else {
            return res.send(err);
          }
        });
      } else {
        return res.send(err);
      }
    });
  };

  exports.get_program = function(req, res) {};

  exports.dummy_me = function(req, res) {
    var user;
    user = {
      "fb_id": "519585436",
      "first_name": "Alex",
      "last_name": "Yau",
      "gender": "male",
      "type": "user",
      "programs": [
        {
          "id": 123,
          "name": "test 1"
        }, {
          "id": 234,
          "name": "test 2"
        }
      ],
      "id": "355acca351433cfc7ffd885a310002e1",
      "rev": "1-cf990fed71f8d86203f2c0163e7dbe9a"
    };
    return res.send(user);
  };

  exports.dummy_programs = function(req, res) {
    return res.send(programs);
  };

  program = function() {
    return {
      "created_at": "2012-07-10 10:24:03",
      "id": 3,
      "main_program": true,
      "name": "Summer 2012 workout program",
      "privacy": 2,
      "user_id": 3,
      "splits": [
        {
          "id": 4,
          "name": "Chest",
          "position": 1,
          "weights": [
            {
              "id": 5,
              "name": "Incline bench press",
              "position": 1,
              "comment": "Can definitely increase weight next time",
              "sets": [
                {
                  "id": 6,
                  "set": 2,
                  "weight": 150,
                  "lbkg": 'lbs',
                  "rep": 3,
                  "position": 1
                }, {
                  "id": 7,
                  "set": 1,
                  "weight": 160,
                  "lbkg": 'kg',
                  "rep": 3,
                  "position": 2
                }
              ]
            }, {
              "id": 8,
              "name": "Flat bench press",
              "position": 2,
              "comment": "",
              "sets": [
                {
                  "id": 9,
                  "set": 3,
                  "weight": 175,
                  "lbkg": 'lbs',
                  "rep": 3,
                  "position": 1
                }
              ]
            }, {
              "id": 10,
              "name": "Barbell row",
              "position": 3,
              "comment": "",
              "sets": [
                {
                  "id": 11,
                  "set": 3,
                  "weight": 180,
                  "lbkg": 'lbs',
                  "rep": 5,
                  "position": 1
                }
              ]
            }, {
              "id": 12,
              "name": "Weighted pull ups",
              "position": 4,
              "comment": "",
              "sets": [
                {
                  "id": 13,
                  "set": 2,
                  "weight": 60,
                  "lbkg": 'lbs',
                  "rep": 8,
                  "position": 1
                }, {
                  "id": 14,
                  "set": 1,
                  "weight": 45,
                  "lbkg": 'lbs',
                  "rep": 7,
                  "position": 2
                }
              ]
            }
          ]
        }, {
          "id": 15,
          "name": "Shoulder",
          "position": 2,
          "weights": [
            {
              "id": 16,
              "name": "Seated Shoulder Press",
              "position": 1,
              "comment": "",
              "sets": [
                {
                  "id": 17,
                  "set": 3,
                  "weight": 105,
                  "lbkg": 'lbs',
                  "rep": 6,
                  "position": 1
                }
              ]
            }, {
              "id": 18,
              "name": "Dumbbell Press",
              "position": 2,
              "comment": "",
              "sets": [
                {
                  "id": 19,
                  "set": 3,
                  "weight": 45,
                  "lbkg": 'lbs',
                  "rep": 6,
                  "position": 1
                }
              ]
            }, {
              "id": 20,
              "name": "Lateral raises",
              "position": 3,
              "comment": "Hurt my wrist during this exercise",
              "sets": [
                {
                  "id": 21,
                  "set": 2,
                  "weight": 25,
                  "lbkg": 'lbs',
                  "rep": 6,
                  "position": 1
                }, {
                  "id": 22,
                  "set": 1,
                  "weight": 10,
                  "lbkg": 'lbs',
                  "rep": 5,
                  "position": 2
                }
              ]
            }, {
              "id": 23,
              "name": "Barbell front raise",
              "position": 4,
              "comment": "",
              "sets": [
                {
                  "id": 24,
                  "set": 2,
                  "weight": 50,
                  "lbkg": 'lbs',
                  "rep": 6,
                  "position": 1
                }
              ]
            }
          ]
        }
      ]
    };
  };

  program1 = new program();

  program2 = new program();

  program2.id = 2;

  program2.name = 'Test Program';

  programs = [program1, program2];

}).call(this);
