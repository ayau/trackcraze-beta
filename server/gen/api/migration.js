// Generated by CoffeeScript 1.3.3
(function() {
  var config, db, db_name, design, nano, trim, updateDesign, update_design;

  config = require('../config');

  nano = require('nano')(config.db.endpoint);

  design = require('./design');

  db_name = config.db.name;

  db = nano.use(db_name);

  nano.db.list(function(err, databases) {
    if (err) {
      return console.log('ERROR :: nano.db.list - %s', JSON.stringify(err));
    }
    if (databases.indexOf(db_name) < 0) {
      return nano.db.create(db_name, function(err, body, headers) {
        if (err) {
          return console.log('ERROR :: %s', JSON.stringify(err));
        } else {
          return updateDesign();
        }
      });
    } else {
      return updateDesign();
    }
  });

  updateDesign = function() {
    var doc, name, _results;
    _results = [];
    for (name in design) {
      doc = design[name];
      if (!(update_design(doc)) && !(update_design(doc))) {
        _results.push(console.log('ERROR :: %s failed to update', doc._id));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  update_design = function(doc) {
    return db.get(doc._id, function(err, body) {
      if (!err) {
        doc._rev = body._rev;
      }
      doc = trim(doc);
      return db.insert(doc, function(err, body, header) {
        if (!err) {
          console.log('%s successfully updated', doc._id);
          return true;
        } else {
          console.log(err);
          return false;
        }
      });
    });
  };

  trim = function(doc) {
    var map, mapreduce, name, reduce, _ref;
    _ref = doc.views;
    for (name in _ref) {
      mapreduce = _ref[name];
      map = mapreduce.map;
      reduce = mapreduce.reduce;
      if (map != null) {
        doc.views[name].map = map.toString().replace(/(\r\n|\n|\r)/gm, '');
      }
      if (reduce != null) {
        doc.views[name].reduce = reduce.toString().replace(/(\r\n|\n|\r)/gm, '');
      }
    }
    return doc;
  };

}).call(this);
